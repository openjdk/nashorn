#
# Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

Object.setIndexedPropertiesToExternalArrayData=sets ByteBuffer to hold indexed data (nashorn extension)

Object.getPrototypeOf=returns the prototype of the specified object

Object.setPrototypeOf=sets the prototype of the given object (ES6)

Object.getOwnPropertyDescriptor=returns a property descriptor for an own property (not inherited property)

Object.getOwnPropertyNames=returns an array of all properties (enumerable or not) found directly on the given object

Object.getOwnPropertySymbols=returns an array of all symbol properties found directly on the given object (ES6)

Object.create=creates a new object with the specified prototype object and properties

Object.defineProperty=adds an own property and/or update the attributes of an existing own property of an object

Object.defineProperties=defines new or modifies existing properties directly on the given object

Object.seal=prevents new properties from being added to the given object and marks existing properties as non-configurable

Object.freeze=prevents new properties from being added to the given object and prevents existing properties from being removed or re-configured

Object.preventExtensions=prevents new properties from ever being added to the given object

Object.isSealed=tells if an object is sealed or not

Object.isFrozen=tells if an object is frozen or not

Object.isExtensible=tells if an object is extensible or not

Object.keys=returns an array of the given object's own enumerable properties

Object=creates a new script object or converts given value as a script object

Object.prototype.toString=returns a string representation of this object

Object.prototype.hasOwnProperty=tells whether this object has the specified property or not

Object.prototype.isPrototypeOf=tests for this object in another object's prototype chain

Object.prototype.propertyIsEnumerable=tells whether the given property is enumerable or not

Object.bindProperties=binds the source object's properties to the target object (nashorn extension)

Array.isArray=tells whether the argument is an array

Array.prototype.toString=returns a string representation of this array

Array.prototype.assertNumeric=asserts that the array is numeric, throws a type error if this is not the case

Array.prototype.toLocaleString=returns a locale-specific string representation of this array

Array=creates a new array

Array.prototype.concat=concatenates arrays

Array.prototype.join=returns a string representation of the array, with a separator placed between elements

Array.prototype.pop=returns the element from the end of the array, or undefined

Array.prototype.push=appends an element to the end of the array

Array.prototype.reverse=reverses the array

Array.prototype.shift=removes the first element from the array and returns that element

Array.prototype.slice=returns a shallow copy of a slice of the array

Array.prototype.sort=sorts the array

Array.prototype.splice=changes the content of the array by removing and/or adding elements

Array.prototype.unshift=adds one or more elements to the beginning of the array

Array.prototype.indexOf=retrieves the first index of an element in the array, or -1 if the element is not found

Array.prototype.lastIndexOf=retrieves the last index of an element in the array, or -1 if the element is not found

Array.prototype.every=applies a predicate to all elements of the array, returns true if the predicate evaluates to true for all

Array.prototype.some=tests whether a predicate evaluates to true for some element in the array

Array.prototype.forEach=applies a function to all elements in the array

Array.prototype.map=applies a function to all elements in the array, returns the array of results

Array.prototype.filter=returns an array with those elements from this array that match a filter function

Array.prototype.reduce=applies a left-fold to the array and returns the result

Array.prototype.reduceRight=applies a right-fold to the array and returns the result

Function=creates a new function with the given parameters and function body

Function.prototype.toString=returns a string representation of this function

Function.prototype.apply=invokes the function with the given this-reference and arguments array

Function.prototype.call=invokes the function with the given this-reference and arguments

Function.prototype.bind=returns a new function with bound this-reference and arguments

Math.abs=returns absolute value of the argument

Math.acos=returns an approximation to the arc cosine of argument, return value is expressed in radians

Math.asin=returns an approximation to the arc sine of argument, return value is expressed in radians

Math.atan=returns an approximation to the arc tangent of argument, return value expressed in radians

Math.atan2=returns an approximation to the arc tangent of the quotient argument1/argument2, signs of argument1 and argument2 are used to determine quadrant of the result

Math.ceil=returns smallest value that is not less than argument and is equal to a mathematical integer, returns argument itself if it is an integer

Math.cos=returns an approximation to the cosine of argument, argument is expressed in radians

Math.exp=returns an approximation to the value of exponential function of argument, e raised to the power of argument where e is the base of natural logarithms

Math.floor=returns the greatest value that is not greater than argument and is equal to mathematical integer, returns argument itself if it is an integer

Math.log=returns an approximation to the natural logarithm of argument

Math.max=returns the largest of the given arguments

Math.min=returns the smallest of the given arguments

Math.pow=returns an approximation to the result of raising argument1 to the power of argument2

Math.random=returns random value between 0 to 1, inclusive 0 and exclusive 1

Math.round=returns mathematical integer value that is closest to the given argument

Math.sin=returns an approximation to the sine of given argument, argument is expressed in radians

Math.sqrt=returns an approximation to the square root of given argument

Math.tan=returns an approximation to the tangent of given argument

String.fromCharCode=returns a string value containing the characters corresponding to the sequence of unicode values given as arguments

String.prototype.toString=returns string value of calling object, returns TypeError if calling object is not a string object

String.prototype.valueOf=returns string value of calling object, returns TypeError if calling object is not a string object

String.prototype.charAt=returns string value representing the character at the index given as argument, empty string if the index is out of range

String.prototype.concat=returns the string resulting from appending the argument string value to the calling object

String.prototype.indexOf=returns the index of first occurrence of specified string, starting the search from position given as argument, returns -1 if the string is not found

String.prototype.lastIndexOf=returns the index of last occurrence of specified string, searching backwards from position given as argument, returns -1 if the string is not found

String.prototype.localeCompare=returns negative, zero, or positive value if calling string value comes before, equal, or after argument string value in the locale-sensitive sort order

String.prototype.match=returns an array containing entire match result when matching calling string value against regular expression given as argument

String.prototype.replace=returns a new string with some or all matches of pattern argument replaced by the given replacement argument

String.prototype.search=returns index of the first occurrence of the match between regular expression given as argument and the calling string, returns -1 if not found

String.prototype.slice=returns a new string by extracting a section of the string according to given arguments

String.prototype.split=returns an array of strings split at each point where the separator given as argument occurs in the calling string, number of array elements is limited by second argument

String.prototype.substring=returns a new string value extracted from the calling string starting from first argument position to position before the second argument position

String.prototype.toLowerCase=returns a new string representing the calling string value converted to lower case

String.prototype.toLocaleLowerCase=returns a new string representing the calling string value converted to lower case according to any locale specific case mappings

String.prototype.toUpperCase=returns a new string representing the calling string value converted to upper case

String.prototype.toLocaleUpperCase=returns a new string representing the calling string value converted to upper case according to any locale specific case mappings

String.prototype.trim=returns a new string representing the calling string with white space removed from both ends

Boolean.prototype.toString=returns string representation of specified Boolean object

Boolean.prototype.valueOf=returns the primitive value of the specified Boolean object

Number.prototype.toString=returns string representation of specified object in the specified radix

Number.prototype.toLocaleString=returns a string with a language sensitive representation of this number

Number.prototype.valueOf=returns the primitive value of the specified object

Number.prototype.toFixed=returns a string representing the number in decimal fixed-point notation

Number.prototype.toExponential=returns a string representing the number in decimal exponential notation

Number.prototype.toPrecision=returns a string representing the number to a specified precision in fixed-point or exponential notation

Date.parse=returns a number, the UTC time value corresponding to the date and time interpreted from the given string argument, returns NAN if the argument is not recognized

Date.UTC=returns the number of milliseconds in the given date object since January 1, 1970, 00:00:00 universal time

Date.now=returns the number of milliseconds elapsed since January 1, 1970, 00:00:00 UTC

Date.prototype.toString=returns the string value representing the given date object

Date.prototype.toDateString=returns the string value representing the date portion of the given date object

Date.prototype.toTimeString=returns the string value representing the time portion of the given date object

Date.prototype.toLocaleString=returns the string value representing the date according to language specific conventions

Date.prototype.toLocaleDateString=returns the string value representing the date portion of the given date object according to language specific conventions

Date.prototype.toLocaleTimeString=returns the string value representing the time portion of the given date object according to language specific conventions

Date.prototype.valueOf=returns the number of milliseconds between January 1, 1970, 00:00:00 UTC and the given date

Date.prototype.getTime=returns the number representing milliseconds elapsed between January 1, 1970, 00:00:00 UTC and the given date

Date.prototype.getFullYear=returns the year of the given date according to local time

Date.prototype.getUTCFullYear=returns the year of the given date according to universal time

Date.prototype.getMonth=returns the month between 0 to 11 of the given date according to local time

Date.prototype.getUTCMonth=returns the month between 0 and 11 of the given date according to universal time

Date.prototype.getDate=returns the day of the month for the given date according to local time

Date.prototype.getUTCDate=returns the day of the month for the given date according to universal time

Date.prototype.getDay=returns the day of the week for the given date according to local time, 0 represents Sunday

Date.prototype.getUTCDay=returns the day of the week for the given date according to universal time, 0 represents Sunday

Date.prototype.getHours=returns the hour in the given date, according to local time

Date.prototype.getUTCHours=returns the hour in the given date, according to universal time

Date.prototype.getMinutes=returns the minutes in the given date, according to local time

Date.prototype.getUTCMinutes=returns the minutes in the given date, according to universal time

Date.prototype.getSeconds=returns the seconds in the given date, according to local time

Date.prototype.getUTCSeconds=returns the seconds in the given date, according to universal time

Date.prototype.getMilliseconds=returns the milliseconds in the given date, according to local time

Date.prototype.getUTCMilliseconds=returns the milliseconds in the given date, according to universal time

Date.prototype.getTimezoneOffset=returns the difference between local time and UTC time in minutes

Date.prototype.setTime=sets the date object to the time given, which is represented by the number of milliseconds since January 1, 1970, 00:00:00 UTC

Date.prototype.setMilliseconds=sets the milliseconds for the given date according to local time

Date.prototype.setUTCMilliseconds=sets the milliseconds for the given date according to universal time

Date.prototype.setSeconds=sets the seconds for the given date according to local time

Date.prototype.setUTCSeconds=sets the seconds for the given date according to universal time

Date.prototype.setMinutes=sets the minutes for the given date according to local time

Date.prototype.setUTCMinutes=sets the minutes for the given date according to universal time

Date.prototype.setHours=sets the hours for the given date according to local time

Date.prototype.setUTCHours=sets the hours for the given date according to universal time

Date.prototype.setDate=sets the day of the month for the given date according to local time

Date.prototype.setUTCDate=sets the day of the month for the given date according to universal time

Date.prototype.setMonth=sets the month for the given date according to the currently set year

Date.prototype.setUTCMonth=sets the month for the given date according to the universal time

Date.prototype.setFullYear=sets the full year for the given date according to local time

Date.prototype.toUTCString=converts the given date to a string using UTC time zone

Date.prototype.toISOString=returns the string value in ISO 8601 format for the given date according to universal time

Date.prototype.toJSON=returns the string representation of the given date

RegExp.prototype.exec=returns an array object containing the results of match of given string against regular expression, null if no match found

RegExp.prototype.test=returns true if match of given string against regular expression found, else returns false

RegExp.prototype.toString=returns string representation of regular expression

Error.prototype.toString=returns string representation of error object

JSON.parse=returns an object by parsing given string as JSON

JSON.stringify=returns a JSON string corresponding to the given ECMAScript value

